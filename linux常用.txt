#linux下配置安装类：
##git编译安装
https://www.cnblogs.com/lonecloud/p/7399804.html

##git yum安装
yum install -y git
git init --bare xxx git创建仓库
chown -R git:git xxx 赋值权限
groupadd git 为linux添加用户组
useradd git 为linux添加用户
passwd 为git设置密码
添加一个不登陆的用户
useradd -g www -s /sbin/nologin www

usermod -g 用户组 用户名
强行设置某个用户所在组
usermod -G 用户组 用户名
把某个用户改为 group(s) 
usermod -a -G 用户组 用户名
把用户添加进入某个组(s）


###迁移git服务端到另一台服务器
1、原来的文件打包
2、添加相同账号
3、设置相同密码

在初始化远程仓库时最好使用 git --bare init   而不要使用：git init
   如果使用了git init初始化，则远程仓库的目录下，也包含work tree，当本地仓库向远程仓库push时,   如果远程仓库正在push的分支上（如果当时不在push的分支，就没有问题）, 那么push后的结果不会反应在work tree上,  也即在远程仓库的目录下对应的文件还是之前的内容，必须得使用git reset --hard才能看到push后的内容

拷贝项目带的git信息清除
右键打开 git bash here
执行命令
find . -name ".git" | xargs rm -rf
就清除了git版本控制信息

##定时任务crontab(https://www.cnblogs.com/zoulongbin/p/6187238.html)
###编辑的格式
是“分 时 日 月 周 命令”。
###当分为＊时
表示每分钟执行一次，时为＊时，表示每小时执行一次。
###如果要设置没隔多久执行
则写为“＊/数字”，在哪个位置就代表没隔多久执行一次。
crontab -l 所有定时任务

##linux 杀毒(https://blog.csdn.net/xiaokurong/article/details/77867888)


##linux部署ssl
1、  修改nginx.conf文件
Nginx的参数配置都在nginx.conf文件中，SSL配置也是如此，下面就是配置举例：

(若想http和https同时启用,应在listen 80下添加以下代码,并注释ssl on这行)
http {
  server {
    listen                       443;
    ssl                          on;
    ssl_certificate              /etc/nginx/certs/domain.crt;
    ssl_certificate_key          /etc/nginx/certs/server.key;
    ssl_verify_depth             1;
    keepalive_timeout            70;
  }
}

配置参数说明如下：
在Nginx下的证书备份是非常简单的，打开nginx.conf文件，找到ssl_certificate和ssl_certificate_key指定的2个文件，通常是.cer(.crt)和.key文件，将这两个文件复制到备份媒质上即可。
listen 443:SSL协议监听的端口，SSL协议缺省使用443端口。
server_name:指定SSL网站主机名。
ssl on:SSL功能打开，采用SSL通信协议。
ssl_certificate：证书文件，server.crt
ssl_certificate_key:私钥文件，server.key
ssl_verify_client on:        要求SSL客户证书认证。
ssl on:SSL            功能打开，采用SSL通信协议。
ssl_verify_depth 1：  SSL客户证书认证链长度。

 ###linux+nginx+ssl配置
https://blog.csdn.net/system1024/article/details/52636147

2、  重新启动nginx
/etc/init.d/nginx restart



#systemctl命令(http://man.linuxde.net/systemctl)
systemctl命令控制服务开启、关闭，查看服务运行状态

#https://linux.cn/article-8835-1.html
操作开机启动项

#mysql 忘记密码
具体步骤如下：
修改MySQL的配置文件（默认为/etc/my.cnf）,在[mysqld]下添加一行skip-grant-tables


保存配置文件后，重启MySQL服务 service mysqld restart

再次进入MySQL命令行 mysql -uroot -p,输入密码时直接回车，就会进入MySQL数据库了，这个时候按照常规流程修改root密码即可。
依次输入：
>use mysql;    更改数据库
>UPDATE user SET PASSORD =password("passwd") WHERE USER= 'root';  重设密码
>flush privileges;  刷新MySQL的系统权限相关表，以防止更改后拒绝访问；或或者重启MySQL服务器
密码修改完毕后，再按照步骤1中的流程，删掉配置文件中的那行，并且重启MySQL服务，新密码就生效了。

##nginx.conf反向代理后，css和js无法引入的情况(proxy_pass)
1)、把页面中的相对路径改成绝对路径(因为域名指向的服务器根目录不同，造成找不到对应样式文件)
2)、把css、js加载进来(加上
	location /script/ {
	    proxy_read_timeout 300;
	    proxy_connect_timeout 300;
	    proxy_set_header Host www.wps.cn;
	    proxy_pass http://www.wps.cn/script/;
	  }
	  )



#linux常见命令

##touch命令
用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件

##赋权限
chmod -R 777 ./

#编辑
vi 打开文件
i 编辑状态
:wq! 保存并退出
:q! 不保存退出
/ 搜索
cat filename 查看文件

find / -name httpd.conf

reboot 重启计算机
su- 切换登陆身份
javac 文件名+后缀 编译java
./a.out 运行c
pwd 显示在那个目录下
useradd 用户名 创建人员
password 用户名
mkdir 打开目录
mv A B  目录A重命名为B
mv /a /b/c  将/a目录移动到/b下，并重命名为c
rmdir 删除目录
more 文件名 分页显示
systemctl start php-fpm.service 开启fpm服务
systemctl start nginx.service 开启nginx服务
systemctl daemon-reload 刷新服务配置

u linux撤销行

##复制文件
cp file /usr/men/tmp/file1

##删除文件或文件夹
rm -f 文件名 删除文件命令
rm -rf  目录名字
其中：
-r：向下递归删除
-f：直接强行删除，且没有任何提示

Linux下的命令，删除文件夹下的所有文件，而不删除文件夹本身
rm -rf *

ls -a 显示隐藏文件

##Linux服务器下载文件夹到本地
###把本地的source.txt文件拷贝到192.168.0.10机器上的/home/work目录下
scp /home/work/source.txt work@192.168.0.10:/home/work/

###把192.168.0.10机器上的source.txt文件拷贝到本地的/home/work目录下
scp work@192.168.0.10:/home/work/source.txt /home/work/

###把192.168.0.10机器上的source.txt文件拷贝到192.168.0.11机器的/home/work目录下
scp work@192.168.0.10:/home/work/source.txt work@192.168.0.11:/home/work/

###拷贝文件夹，加-r参数
scp -r /home/work/sourcedir work@192.168.0.10:/home/work/

ntpdate -u ntp.api.bz 纠正时间

rpm -qa | grep iptables 搜索安装包

.tar
解包：tar xvf FileName.tar
打包：tar cvf FileName.tar DirName
（注：tar是打包，不是压缩！）
---------------------------------------------
.gz
解压1：gunzip FileName.gz
解压2：gzip -d FileName.gz
压缩：gzip FileName.tar.gz
解压：tar zxvf FileName.tar.gz
压缩：tar zcvf FileName.tar.gz DirName

find -name "filename" 找文件
whereis "filename" 找文件

Ctrl+C 强制退出到命令行

netstat -anp 查看端口开启情况

netstat -an | grep 80 查看80端口的开启情况

netstat -anp | grep 80 查看80端口的开启情况(带pid)

netstat -tnlp|grep 9501 查看端口的开启情况(带pid)

ps aux |grep mysql 查看mysql的进程状态，包括日志存储路径

kill -9 pid 结束进程

systemctl list-unit-files --type=service | grep enabled	查看开机启动项

chown -R www:www /log log目录转换权限组

systemctl restart php-fpm.service 重启php

## Linux 下 取进程占用 cpu 最高的前10个进程
ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head


## linux 下 取进程占用内存(MEM)最高的前10个进程
ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head

## linux 下 剩余内存
free -m
free -h

## 释放内存
echo 1 > /proc/sys/vm/drop_caches

##tmp磁盘空间情况
df -hl

#linux任务管理器
top  //每隔5秒显式所有进程的资源占用情况
top-d2  //每隔2秒显式所有进程的资源占用情况
top-c  //每隔5秒显式进程的资源占用情况，并显示进程的命令行参数(默认只有进程名)
top-p12345-p6789//每隔5秒显示pid是12345和pid是6789的两个进程的资源占用情况
top-d2-c-p123456//每隔2秒显示pid是12345的进程的资源使用情况，并显式该进程启动的命令行参数

#cpu运行状况信息，输出如下：
mpstat  -P ALL 2

cat /etc/passwd 可以查看所有用户的列表
w 可以查看当前活跃的用户列表
cat /etc/group 查看用户组

tail -n filename
查看文件中末尾的n行 不加参数 默认 10行
tail -f 命令会保持活动状态

lsof (List Open Files) 列出当前系统打开文件的工具

chmod  (u g o a)   (+ - =)   (r w x)   (文件名)

id  user（显示用户组和id的详细信息）
groups user（只是显示用户所属组的名字）

连接数据库
#mysql -uroot -p
>use mysql;

回到上一个目录
cd -

编译安装
configure -- prefix +(安装路径)
make
make install

简化PHP执行命令
vi /bash_profile

查看php加载的拓展
php -m

php默认拓展路径
/usr/lib64/php/modules/

linux安装swoole
找到phpize路径 phpize：php拓展模块
路径切到swoole
输入phpize路径，回车
生成configure
执行 ./configure --with-php-config=/usr/bin/php-config(前提是安装了gcc 安装gcc yum -y install gcc gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-develfreetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-develglib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devele2fsprogs e2fsprogs-devel krb5 krb5-devel libidn libidn-devel opensslopenssl-devel openldap openldap-devel nss_ldap openldap-clientsopenldap-servers)
make
makeinstall
配置php.ini


man php 查看php命令目录

/usr/bin 所有命令目录

wc -l 只显示行数

ctrl-c 发送 SIGINT 信号给前台进程组中的所有进程。常用于终止正在运行的程序。

ctrl-z 发送 SIGTSTP 信号给前台进程组中的所有进程，常用于挂起一个进程。

ctrl-d 不是发送信号，而是表示一个特殊的二进制值，表示 EOF。

ctrl-\ 发送 SIGQUIT 信号给前台进程组中的所有进程，终止前台进程并生成 core 文件。

让进程在后台可靠运行的几种方法(https://www.ibm.com/developerworks/cn/linux/l-cn-nohup/;https://blog.csdn.net/superwebmaster/article/details/80661162)


1)、nohup（当用户注销（logout）或者网络断开时，终端会收到 HUP（hangup）信号从而关闭其所有子进程）
2)、setsid（进程不接受 HUP 信号）
3)、& (挂起)
4)、disown (未加任何处理就已经提交了命令，该如何补救)
5)、screen (大量这种命令需要在稳定的后台里运行)

netstat -anp 2>/web/null | grep 8811 | grep LISTEN | wc -l
端口开启情况   把Null信息放进null 8811端口 LISTEN类型	行数

ps [选项]
下面对命令选项进行说明：
-e   显示所有进程。
-f    全格式。
-h   不显示标题。
-l    长格式。
-w  宽输出。
a    显示终端上的所有进程，包括其他用户的进程。
r    只显示正在运行的进程。
u 　以用户为主的格式来显示程序状况。

x     显示所有程序，不以终端机来区分。

ps -ef 显示出的结果：
    1.UID       用户ID
    2.PID        进程ID
    3.PPID      父进程ID
    4.C           CPU占用率
    5.STIME     开始时间
    6.TTY         开始此进程的TTY----终端设备
    7.TIME       此进程运行的总时间
    8.CMD       命令名

pidof(选项)(参数)
-s：仅返回一个进程号；
-c：仅显示具有相同“root”目录的进程；
-x：显示由脚本开启的进程；
-o：指定不显示的进程ID

平滑重启
kill -usr1 pid
swoole 服务重启 reload

##redis设置
进入redis命令状态
redis-cli
输入密码进入
auth xxx
获取当前密码
config get requirepass
###设置密码
1)、config set requirepass xxx
2)、查看redis.conf文件()
###设置外部访问
1>注释掉bind
#bind 127.0.0.1
(https://blog.csdn.net/feinifi/article/details/80193114)
2>默认不是守护进程方式运行，这里可以修改
daemonize no
3>禁用保护模式
protected-mode no

df -h 查看硬盘空间

###设置redis只允许固定ip访问
	1、bind xxx只能设置只允许本机访问(xxx看本机有多少网卡ip)
	2、防火墙或者使用xx云的安全组，来限制指定的主机连接6379端口


docker:
docker ps -a	查看所有已关闭和未关闭的container
docker rm containerid	删除容器
docker images 查看本地镜像
如果要重新载入NGINX可以使用以下命令发送 HUP 信号到容器：
$ docker kill -s HUP container-name
重启 NGINX 容器命令：
$ docker restart container-name





#配置相关
systemctl enable mariadb.service 开机自启动
 ps -ef | grep java 查看java相关进程
 yum php info php版本信息

##php升级版本
 	1:进入终端后查看PHP版本
	php -v
	输出可能如下：
	PHP 5.4.35 (cli) (built: Nov 14 2014 07:04:10) Copyright (c) 1997-2014 The PHP Group Zend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies    with Zend OPcache v7.0.4-dev, Copyright (c) 1999-2015, by Zend Technologies
	2:执行下面的命令升级软件仓库
	 rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm（搜索）
	 rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
	3:执行下面的命令删除php
	yum remove php-common (删除yum包)
	然后像安装那样问你是否继续的，输入yes即可
	卸载原来低版本的PHP
	rpm -qa |grep php|xargs rpm -e
	查看可使用的php包
	yum list | grep php


	4:安装php 5.6版本（php56w-devel这个不是必需的）
	yum install -y php71w php71w-fpm php71w-mysql php71w-gd libjpeg* php71w-ldap php71w-odbc php71w-pear php71w-xml php71w-xmlrpc php71w-mbstring php71w-bcmath php71w-mhash
	(yum install php71w php71w-fpm php71w-mysql php71w-gd libjpeg* php71w-ldap php71w-odbc php71w-pear php71w-xml php71w-xmlrpc php71w-mbstring php71w-bcmath php71w-mhash)

	5:重启httpd
	service httpd restart
	查看最新的版本
	php -v
	现在应该是5.6了！

##php把session的储存地址换成redis(php5.3.3以前php-fpm还没有被php收录，配置php基本都在php.ini里面，php5.3.3及以后，除了在php.ini配置以外，还可以在php-fpm.conf里面配置。
多个地方都可以配置的话，就存在一个优先级。php-fpm.conf优先级比php.ini高。)
;session.save_handler = files    session以文件形式存储
session.save_handler = redis     session存储在redis里面
session.save_path ="tcp://172.18.107.153:6379?auth=mei2wsx"

在php.ini里的配置session.save_path是注释掉的，那么Seesion保存的路径在不同类型操作系统保存在什么位置？
Linux：
/tmp 或 /var/lib/php/session
Windows：
C:\WINDOWS\Temp
也可以去搜索以"sess_"开头的文件，来查找Seesion保存的路径

[Session]
session.save_handler = files ; 用于保存/取回数据的控制方式
session.save_path = C:\win\temp ; 在 save_handler 设为文件时传给控制器的参数，
; 这是数据文件将保存的路径。
session.use_cookies = 1 ; 是否使用cookies
session.name = PHPSESSID
; 用在cookie里的session的名字
session.auto_start = 0 ; 在请求启动时初始化session
session.cookie_lifetime = 0 ; 为按秒记的cookie的保存时间，
; 或为0时，直到浏览器被重启
session.cookie_path = / ; cookie的有效路径
session.cookie_domain = ; cookie的有效域
session.serialize_handler = php ; 用于连接数据的控制器
; php是 PHP 的标准控制器。
session.gc_probability = 1 ; 按百分比的'garbage collection（碎片整理）'进程
; 在每次 session 初始化的时候开始的可能性。
session.gc_maxlifetime = 1440 ; 在这里数字所指的秒数后，保存的数据将被视为
; '碎片(garbage)'并由gc 进程清理掉。
session.referer_check = ; 检查 HTTP引用以使额外包含于URLs中的ids无效
session.entropy_length = 0 ; 从文件中读取多少字节
session.entropy_file = ; 指定这里建立 session id
; session.entropy_length = 16
; session.entropy_file = /dev/urandom
session.cache_limiter = nocache ; 设为{nocache,private,public},以决定 HTTP 的
; 缓存问题
session.cache_expire = 180 ; 文档在 n 分钟后过时
session.use_trans_sid = 1 ; 使用过渡性的 sid 支持，若编译时许可了

##ssh连接不上云服务器
	1、测试端口 22、80、3306
	2、只有端口22连接失败，看看云服务器ssh.d软件有没有down掉;否则提工单

##服务器时间
 	date 查看时间
 	date -s "YYYY-MM-DD hh:mm[:ss]" 修改日期、时间
 	ntpdate 服务器IP 同步服务器时间

 	(安装ntp服务命令：yum install ntp
 	ntp常用服务器：
    中国国家授时中心：210.72.145.44
    NTP服务器(上海) ：ntp.api.bz
    美国：time.nist.gov
    复旦：ntp.fudan.edu.cn
    微软公司授时主机(美国) ：time.windows.com
    台警大授时中心(台湾)：asia.pool.ntp.org)

    ntpdate -v ntp1.aliyun.com
    ntpdate -v 1.ntp.company.com

##ab压测
yum -y install httpd-tools
ab -v 查看ab版本
ab –help

ab -n1000 -c 10 http://www.91cnm.com/

##linux上安装composer
1.首先执行命令 curl -sS https://getcomposer.org/installer | php //下载composer
2.mv composer.phar /usr/local/bin/composer //将composer.phar文件移动到bin目录以便全局使用composer命令
3.执行composer 如果出现
/usr/bin/env: php: No such file or directory 主要是php安装文件不在/usr/local/bin 然后走到 cd /usr/bin 目录下执行 ln -s /usr/local/php7.1/bin/php /usr/local/bin/php 即可
4.切换国内源
composer config -g repo.packagist composer https://packagist.phpcomposer.com

#添加拓展包
修改
composer.json require{xx}
执行
composer dump-autoload
composer update



#go
命令查看安装的环境 go env

##linux下如何查看某软件是否已安装
1、rpm包安装的 rpm -qa | grep ruby
2、以deb包安装的 dpkg-l|grepruby
3、yum方法安装的 yum list installed | grep ruby
4、如果是以源码包自己编译安装的，例如.tar.gz或者tar.bz2形式的，这个只能看可执行文件是否存在了，
上面两种方法都看不到这种源码形式安装的包。如果是以root用户安装的，可执行程序通常都在/sbin:/usr/bin目录下。


一、IP相关统计
1、统计IP访问量 统计PV
awk '{print $7}' access.log|wc -l
复制代码
2、独立ip访问数量 统计UV
awk '{print $1}' access.log | sort -n | uniq | wc -l
复制代码
3、查看某一时间段的IP访问量(4-5点)
grep "05/Oct/2018:0[4-5]" access.log | awk '{print $1}' | sort | uniq -c| sort -nr | wc -l
复制代码
4、查看访问最频繁的前100个IP
awk '{print $1}' access.log | sort -n |uniq -c | sort -rn | head -n 100
复制代码
5、查看访问100次以上的IP
awk '{print $1}' access.log | sort -n |uniq -c |awk '{if($1 >100) print $0}'|sort -rn
复制代码
6、查询某个IP的详细访问情况,按访问频率排序
grep '127.0.0.1' access.log |awk '{print $7}'|sort |uniq -c |sort -rn |head -n 100
复制代码
二、页面访问统计
1、查看访问最频的页面(TOP50)
awk '{print $7}' access.log | sort |uniq -c | sort -rn | head -n 50
复制代码
2、查看访问最频的页面([排除php页面])(TOP50)
grep -v ".php"  access.log | awk '{print $7}' | sort |uniq -c | sort -rn | head -n 50
复制代码
3、查看页面访问次数超过100次的页面
cat access.log | cut -d ' ' -f 7 | sort |uniq -c | awk '{if ($1 > 100) print $0}' | less
复制代码
4、查看最近1000条记录，访问量最高的页面
tail -1000 access.log |awk '{print $7}'|sort|uniq -c|sort -nr|less
复制代码
三、请求量统计
1、统计每秒的请求数,top100的时间点(精确到秒)
awk '{print $4}' access.log |cut -c 14-21|sort|uniq -c|sort -nr|head -n 100
复制代码
2、统计每分钟的请求数,top100的时间点(精确到分钟)
awk '{print $4}' access.log |cut -c 14-18|sort|uniq -c|sort -nr|head -n 100
复制代码
3、统计每小时的请求数,top100的时间点(精确到小时)
awk '{print $4}' access.log |cut -c 14-15|sort|uniq -c|sort -nr|head -n 100
复制代码
四、性能分析
在nginx log中最后一个字段加入$request_time

1、列出传输时间超过 3 秒的页面，显示前20条
cat access.log|awk '($NF > 3){print $7}'|sort -n|uniq -c|sort -nr|head -20
复制代码
2、列出php页面请求时间超过3秒的页面，并统计其出现的次数，显示前100条
cat access.log|awk '($NF > 1 &&  $7~/\.php/){print $7}'|sort -n|uniq -c|sort -nr|head -100
复制代码
五、TCP连接统计
1、查看当前TCP连接数
netstat -tan | grep "ESTABLISHED" | grep ":80" | wc -l
复制代码
2、用tcpdump嗅探80端口的访问看看谁最高
tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F"." '{print $1"."$2"."$3

##go
命令查看安装的环境 go env

##linux下如何查看某软件是否已安装
1、rpm包安装的 rpm -qa | grep ruby
2、以deb包安装的 dpkg-l|grepruby
3、yum方法安装的 yum list installed | grep ruby
4、如果是以源码包自己编译安装的，例如.tar.gz或者tar.bz2形式的，这个只能看可执行文件是否存在了，
上面两种方法都看不到这种源码形式安装的包。如果是以root用户安装的，可执行程序通常都在/sbin:/usr/bin目录下。

##docker
后台运行
docker run -itd --name ubuntu-test ubuntu /bin/bash 注：加了 -d 参数默认不会进入容器，想要进入容器需要使用指令 docker exec

停止一个容器
docker stop <容器 ID>

运行容器列表
docker ps

拉取
docker pull ubuntu

导出容器
docker export 1e560fca3906 > ubuntu.tar

导入容器快照
cat docker/ubuntu.tar | docker import - test/ubuntu:v1

删除容器
docker rm -f 1e560fca3906
docker container prune 清除所有终止容器
