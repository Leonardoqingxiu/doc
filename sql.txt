#sql常用函数
##字段合并
	concat()、group_concat()、CONCAT_WS()





#sql批量更新语句(https://www.cnblogs.com/mqxs/p/6794725.html)
UPDATE mytable 
    SET myfield = CASE id 
        WHEN 1 THEN 'value'
        WHEN 2 THEN 'value'
        WHEN 3 THEN 'value'
    END
WHERE id IN (1,2,3)


#sql 如果String中含有不是0-9之间的数字或者是小数点时,返回true ，反之则返回false。
SELECT (phone REGEXP '[^0-9.]') as state  from el_user


##mysql左联常见问题 
例子一 当where条件里面有表b的筛选条件时，左联变内联
表a 
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '场景id',
  `qrcode` varchar(255) NOT NULL COMMENT '二维码路径',
  `expire` varchar(100) NOT NULL COMMENT '到期时间时间戳',
  `status` smallint(4) NOT NULL DEFAULT '1' COMMENT '状态',
  `name` varchar(100) NOT NULL,
  `phone` varchar(100) DEFAULT NULL,

表b
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `openid` varchar(50) NOT NULL,
  `scene_id` int(11) NOT NULL COMMENT '场景id（同时对应qrcode表的id）',
  `created_at` datetime NOT NULL ON UPDATE CURRENT_TIMESTAMP,
  `status` tinyint(6) NOT NULL DEFAULT '1',

SELECT
	`q`.`id`,
	`q`.`name`,
	`q`.`phone`,
	`q`.`qrcode`,
	count( s.id ) AS num 
FROM
	`s_qrcode` `q`
	LEFT JOIN `s_spread_scan` `s` ON `q`.`id` = `s`.`scene_id` and xxx=xxx(表b的刷选条件)
GROUP BY
	q.id 
ORDER BY
	num DESC,
	q.id ASC 
	LIMIT 0,
	10


##mysql 表a->表b 一对多实例 计算表b对应数量实例
解决问题:
1)、where条件有表b条件，左联变内联
2)、用count计算数量，必须加GROUP BY，建议先把数据先查询出来看看效果，在加上count()、GROUP BY
表a
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL DEFAULT '' COMMENT '餐厅(酒店)名字',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态',
表b
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `meetid` int(11) NOT NULL DEFAULT '0' COMMENT '活动id',
  `rid` int(11) NOT NULL DEFAULT '0' COMMENT '餐馆id',

  SELECT
	`mr`.`id`,
	`name`,
	`phone`,
	`country`,
	`province`,
	`city`,
	`district`,
	`address`,
	`num`,
	`eat_begin_date`,
	`eat_end_date`,
	 count(mr.id)  AS eatmantimes 
FROM
	`sent_meet_restaurant` `mr`
	LEFT JOIN `sent_meet_restaurant_record` `mrr` ON `mr`.`id` = mrr.rid 
	AND mrr.STATUS = 1 
WHERE
	`mr`.`status` = 1 
	AND `account_id` = 1 
	GROUP BY `mr`.`id`


#mysql优化
参考资料:
##将导致引擎放弃使用索引而进行全表扫描的情况:
1)、对字段进行 null 值判断;
2)、使用!=或<>操作符;
3)、使用 or 来连接条件;(可用UNION和UNION ALL);
4)、in 和 not in;
5)、NAME LIKE ‘%L%’ (NAME LIKE ‘L%’);
6)、对字段(“=”左边)进行函数、算术运算或其他表达式运算;

##开启查询缓存，查询语句会让MySQL不使用缓存：
1)、sql中使用某些函数;
2)、
##学会使用EXPLAIN
##当只要一行数据时使用LIMIT 1
##正确的使用索引
##不要ORDER BY RAND()
##避免SELECT *
##使用 ENUM 而不是 VARCHAR
##使用 NOT NULL
##IP地址存成 UNSIGNED INT
##固定长度的表会更快
##垂直分割(数据库中的表按列变成几张表的方法)
##拆分大的 DELETE 或 INSERT 语句(这两个操作是会锁表的)
##越小的列会越快
##选择正确的存储引擎

表同步3
redis写入磁盘及还原5



#where 查询内if else 判断
select a.id,b.* from a join b on if(a.id is null,1=1,a.id=b.id);
















##案例
`Course` 
  `c_id` 课程id
  `c_name` 课程名称
  `t_id` 教师id
 
`Score` 
  `s_id` 学生id
  `c_id` 课程id
  `s_score` 分数id

`Student` 
  `s_id` 学生id
  `s_name` 学生名称
  `s_birth` 生日
  `s_sex` 性别

`Teacher` 
  `t_id` 教师id
  `t_name` 教师名称

-- 1、查询语文比数学成绩高的学生的信息及课程分数  
SELECT
	st.s_id,
	st.s_name, 
	sc.c_id,
	sc.s_score as 01_score,
	sc2.s_score as 02_score
FROM
	Student st
	LEFT JOIN Score sc ON st.s_id = sc.s_id and sc.c_id='01'
	LEFT JOIN Score sc2 ON st.s_id = sc2.s_id and sc2.c_id='02'
	WHERE sc.s_score<sc2.s_score
	or(sc2.s_score is null and sc.s_score is not null) 


#牛逼查询
	SELECT
	`id`,
	group_concat( order_id ) AS orderids,
	`share_openid`,
	`service_openid`,
	`p_name`,
	`sell_fall_status`,
	concat( share_openid, '_', p_name ) AS share_comp,
	( CASE WHEN service_openid = 'o7pF8w20CarkvEmiuAwvYZUO8O_0' THEN 1 WHEN service_openid != 'o7pF8w20CarkvEmiuAwvYZUO8O_0' THEN 2 END ) iself 
FROM
	`sent_meet_order` 
WHERE
	`status` > 0 
	AND `meet_id` = 255 
	AND ( share_openid = "o7pF8w20CarkvEmiuAwvYZUO8O_0" OR service_openid = "o7pF8w20CarkvEmiuAwvYZUO8O_0" ) 
GROUP BY
	share_comp 
ORDER BY
CASE
	
	WHEN sell_fall_status <> 2 THEN
	sell_fall_status ELSE 1 
	END,
	iself,
	order_id DESC 
	LIMIT 0,
20

#获取不连续的id
SELECT
 id 
FROM
 ( SELECT id FROM sent_mem_customer ORDER BY id ASC ) t 
WHERE
 id != 1 
 AND id != ( SELECT max( id ) FROM sent_mem_customer ) 
 AND (
 NOT EXISTS ( SELECT 1 FROM sent_mem_customer WHERE id = t.id + 1 ) 
 OR NOT EXISTS ( SELECT 1 FROM sent_mem_customer WHERE id = t.id - 1 ) 
 )

 #统计订单是今天的数据
 SELECT
	wpo.id,
	wpo.order_id,
	wpo.pp_id,
	wpo.nums,
	wpo.money,
	wpo.STATUS,
	wpo.pay_time,
	concat( pp_id, "_",  wp.id) AS share_man,
	sum( wpo.nums ) AS sum_num,
	sum( wpo.money ) AS sum_money,
	SUM( IF ( add_time >= 1586966400 AND add_time <= 1587052799, 1, 0 ) ) AS today_order,
	wp.company
FROM
	wes_promotion_order AS wpo
	LEFT JOIN wes_providers wp ON wpo.provider_id = wp.id
WHERE
	1 = 1 
	AND wpo.p_id = '5' 
	AND wpo.STATUS IN ( 1, 2 ) 
GROUP BY
	share_man 
ORDER BY
	sum_num DESC,
	today_order DESC